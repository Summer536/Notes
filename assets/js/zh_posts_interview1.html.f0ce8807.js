"use strict";(self.webpackChunkvuepress=self.webpackChunkvuepress||[]).push([[8563],{1263:(a,n,e)=>{e.r(n),e.d(n,{comp:()=>i,data:()=>h});var r=e(641);const t=e.p+"assets/img/T_5.276a6110.png",s=e.p+"assets/img/T6.1c3e02ab.png",o=e.p+"assets/img/T10_1.2ec1d3eb.png",p={},i=(0,e(6262).A)(p,[["render",function(a,n){return(0,r.uX)(),(0,r.CE)("div",null,[n[0]||(n[0]=(0,r.Lk)("h1",{id:"八股面试",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#八股面试"},[(0,r.Lk)("span",null,"八股面试")])],-1)),n[1]||(n[1]=(0,r.Lk)("h2",{id:"简介",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#简介"},[(0,r.Lk)("span",null,"简介")])],-1)),n[2]||(n[2]=(0,r.Lk)("p",null,"记录一些面试问题。",-1)),(0,r.Q3)(" more "),n[3]||(n[3]=(0,r.Fv)('<h2 id="小米-大模型推理优化工程师-一面-09-12" tabindex="-1"><a class="header-anchor" href="#小米-大模型推理优化工程师-一面-09-12"><span>小米-大模型推理优化工程师（一面，09.12）</span></a></h2><h3 id="_1-有没有了解过qnn推理引擎" tabindex="-1"><a class="header-anchor" href="#_1-有没有了解过qnn推理引擎"><span>1. 有没有了解过QNN推理引擎？</span></a></h3><p>QNN (Qualcomm Neural Network) 主要是基于一些 Qualcomm Snapdragon 平台（CPU / GPU / DSP / NPU）的一个Ai推理引擎，执行一些轻量级深度学习模型（大模型执行不了）。</p><h3 id="_2-计算流体力学会用到高性能计算的东西吗" tabindex="-1"><a class="header-anchor" href="#_2-计算流体力学会用到高性能计算的东西吗"><span>2. 计算流体力学会用到高性能计算的东西吗？</span></a></h3><p>是的，在CFD中用到的HPC内容主要有：<strong>并行计算</strong>，<strong>稀疏矩阵运算优化</strong>，<strong>分布式通信与负载均衡</strong>，其实这个专业和数学也没啥区别了，天天解方程。</p><p><strong>与大模型推理相比这个HPC的区别在哪里？</strong></p><ol><li><p>计算模式不同：<strong>PDE + 高精度</strong>， 大模型是<strong>张量、矩阵 + 低精度</strong></p></li><li><p>数据依赖不同：CFD 的<strong>时间步长更新通常是强依赖</strong>的，前一步必须算完才能算下一步，难以完全解耦。大模型推理里，Prefill 阶段可以大批量并行，但 Decode 阶段是自回归的，计算依赖不同。</p></li><li><p>优化重点不同：CFD 优化常在稀疏矩阵运算、迭代收敛效率和通信负载上。大模型推理优化更关注矩阵乘法效率（GEMM + Tensor Core）、KV Cache管理、量化/压缩技术。</p></li></ol><h3 id="_3-项目中的推理框架的整体架构和思路是什么" tabindex="-1"><a class="header-anchor" href="#_3-项目中的推理框架的整体架构和思路是什么"><span>3. 项目中的推理框架的整体架构和思路是什么？</span></a></h3><p>整体架构是以：CUDA内核层 + Prefill/Decoder 和FFN层 + model层，三层嵌套的。</p><ol><li>cuda内核层：embedding、linear、RMSnorm、softmax、RoPE、SwiGLU这些底层cuda kernel，并且采用了算子融合、向量化读取等手段进行内核优化；</li><li>神经网络层：Prefill层是以attention计算+mask部分组成； Decoder layer是比前者少了一个mask； FFN layer的话就是一个gate up、Swiglu以及down linear投影输出；</li><li>model层：输入处理（Tokenizer + Embedding） + if firsttoken：Prefill else decoder + 输出处理（LM头线性变换 + TopK采样）</li><li>权重处理：权重只加载一次，在整个推理过程中复用；通过指针传递到各个layer中，然后再传递到各个kernel中使用。</li></ol><h3 id="_4-项目中的分级内存管理策略是什么" tabindex="-1"><a class="header-anchor" href="#_4-项目中的分级内存管理策略是什么"><span>4. 项目中的分级内存管理策略是什么？</span></a></h3><p>双池设计：大内存池(&gt;1MB)和小内存池(≤1MB)分别管理</p><p>延迟释放：释放的内存不立即归还OS，而是标记为可用</p><p>碎片管理：通过FreeSize跟踪小内存池碎片，超过1GB时清理</p><p><strong>哪些会用到大内存池，哪些会用到小内存池？</strong></p><p>大： kvcache、QKV weight、</p><p>小：计算结果的一些中间值</p><h3 id="_5-项目中针对kv-cache是如何做内存管理的呢" tabindex="-1"><a class="header-anchor" href="#_5-项目中针对kv-cache是如何做内存管理的呢"><span>5. 项目中针对kv cache是如何做内存管理的呢？</span></a></h3><p><strong>预分配策略</strong>：KV cache在模型初始化时一次性分配整个max_seq_len的空间（因此都在大内存池中）</p><p>内存复用：同一个cache缓冲区在整个推理过程中重复使用<br><img src="'+t+'" alt="" loading="lazy"></p><p><strong>kv cache如何做更新的呢？</strong></p><p>先计算指针的偏移量；</p><p>上下文阶段：一次性填充整个输入序列的KV值</p><p>生成阶段：增量更新，每次只更新一个token位置的KV值</p><h3 id="_6-框架里做了哪些算子融合" tabindex="-1"><a class="header-anchor" href="#_6-框架里做了哪些算子融合"><span>6. 框架里做了哪些算子融合？</span></a></h3><p>QKV bais + RoPE, attention计算的融合, FFN layer里面的Gate和up linear等等</p><p><strong>RoPE 为什么没有实现融合</strong><br> LLaMA2 的RoPE问题，它以64为单位进行的RoPE，没法进行向量化读取？</p><h3 id="_7-gemm的优化策略以及如何解决bank-conflict" tabindex="-1"><a class="header-anchor" href="#_7-gemm的优化策略以及如何解决bank-conflict"><span>7. GEMM的优化策略以及如何解决bank conflict？</span></a></h3><p>share mem + float4 + 双缓冲 + swlizzing（解决bank conflict）</p><h3 id="_8-实习经历的量化-做激活值的量化吗" tabindex="-1"><a class="header-anchor" href="#_8-实习经历的量化-做激活值的量化吗"><span>8. 实习经历的量化，做激活值的量化吗？</span></a></h3><p>在实习经历里，我主要做的是 权重量化（Weight Quantization）</p><p>因为激活值比较难量化：动态范围大，异常值多、精度敏感性强，比较难做优化。</p><h3 id="_9-nsight-compute和-nsight-system掌握程序如何-平时如何使用" tabindex="-1"><a class="header-anchor" href="#_9-nsight-compute和-nsight-system掌握程序如何-平时如何使用"><span>9. nsight-compute和 nsight-system掌握程序如何？平时如何使用？</span></a></h3><p>NVIDIA Nsight Systems: 用于系统级性能分析，查看API调用、GPU利用率、内存拷贝/内核执行时间线、CPU-GPU同步等。（回答：发生了什么？）</p><p>NVIDIA Nsight Compute: 用于内核级微观性能分析，是优化内核的核心工具。它可以提供详细的指标，如计算吞吐量、内存吞吐量、指令发射效率、缓存命中率等。（回答：为什么发生？）</p><p><strong>NCU</strong>：</p><p>入门：能用 ncu --metrics 收集基本指标，如 FLOPS、内存带宽、warp 效率。</p><p>中级：会分析 occupancy、shared memory bank conflict、warp divergence 等问题，并能够定位 kernel 瓶颈。</p><p>例如：<strong>针对占用率问题：有理论占用率和实际占用率，有每线程使用的寄存器数量和每block使用的share mem数量； 针对内存问题：有L1 L2cache命中率；有未使用内存率（越高表示越是内存受限）；还有bank conflict</strong></p><p><strong>NSYS</strong></p><p>入门：能够捕获 timeline，看到 kernel 启动、数据传输、CPU-GPU 调度。</p><p>中级：分析 host 与 device 的 overlap，识别 kernel launch overhead、数据拷贝瓶颈。</p><h3 id="_10-如果将一个图片-一段文字输入给大模型推理框架例如vllm-它是如何对图片和文本进行tokenizer的" tabindex="-1"><a class="header-anchor" href="#_10-如果将一个图片-一段文字输入给大模型推理框架例如vllm-它是如何对图片和文本进行tokenizer的"><span>10. 如果将一个图片+一段文字输入给大模型推理框架例如vLLM，它是如何对图片和文本进行Tokenizer的？</span></a></h3><p>整个推理的过程还是三大步，tokenizer（编码） -&gt; 推理 -&gt; 解码。</p><p>对于多模态模型，图片将会通过一个vision tokenizer<strong>视觉编码器</strong>（经典的比如CLIP里面的vit vision transformer，或者qwen的视觉主干网络）来处理为与文本类似的数字ID；然后，<strong>+构建多模态提示</strong>会有特殊token来标记从xxx到xxx是图片，方便模型来理解；最后，<strong>+与文本token ID组合成一个序列</strong></p><h4 id="vision-transformer-vit-如何对一张图像进行编码" tabindex="-1"><a class="header-anchor" href="#vision-transformer-vit-如何对一张图像进行编码"><span>Vision Transformer (ViT) 如何对一张图像进行编码？</span></a></h4><p>ViT的核心思想是摒弃传统的卷积操作，完全采用Transformer架构来处理图像。其编码过程可以概括为：<strong>将图像分割成一个个小块（Patches），将这些小块视为类似于NLP中的单词（Tokens），然后加上位置信息，最后送入标准的Transformer Encoder进行特征提取。</strong></p><p>输出：一系列视觉特征向量（“视觉tokens”），例如 [PATCH₁], [PATCH₂], ..., [PATCHₙ]（N通常是256或576）。同时，<strong>ViT还会输出一个全局的 [CLS] token，但通常用于分类，在多模态对话中较少使用。</strong></p><ol><li><p><strong>图像分块 (Split into Patches)</strong></p><p>操作：将一张输入图像（例如 224x224x3，高x宽xRGB通道）分割成 <strong>N 个规则的、不重叠的小块</strong>（Patches）。每个Patch的大小通常是 16x16 或 14x14。</p><p>计算：如果图像是 224x224，使用 16x16 的Patch，那么将会得到 N = (224 / 16) * (224 / 16) = 196 个Patches。</p></li><li><p><strong>线性投影/嵌入 (Linear Projection / Embedding)</strong></p><p>目的：将每个2D的Patch映射到一个D维的向量空间（也称为潜在空间或特征空间），这个向量可以被Transformer处理。</p><p>展平：将每个Patch（例如 16x16x3 = 768 个像素）展平为一个一维向量（长度为768）。</p><p>可学习的映射：通过一个可训练的线性层（全连接层） 或卷积层（ kernel_size=stride=patch_size）将这个768维的向量投影到一个更高的维度 D（例如1024维）。这个 D 就是Transformer模型隐藏层的大小。</p><p>结果：现在我们<strong>得到了一个序列 (N, D)，即 196 个向量，每个向量是 1024 维。这些向量被称为 Patch Embeddings，它们代表了图像的原始视觉信息。</strong></p></li><li><p><strong>添加类别令牌与位置嵌入 (Add [CLS] Token and Position Embedding)</strong></p><p>这是至关重要的一步，它为序列注入了结构信息。</p><p><strong>可学习的类别令牌 ([CLS] Token)</strong>：在序列的最前面，我们额外添加一个可学习的向量（1, D），称为 [CLS] token（源自BERT中的Class Token）。</p><p>作用：在图像分类任务中，这个 [CLS] token的最终输出状态会作为整个图像的聚合表征，送入分类头进行预测。在多模态模型中，它有时也会被用作图像的全局摘要。</p><p><strong>位置嵌入 (Position Embedding)</strong>：</p><p>操作：为序列中的每一个位置（包括 [CLS] token和所有196个Patch tokens）都分配一个可学习的 D 维向量，称为位置嵌入。</p><p>相加：将这些位置嵌入向量与对应的Patch Embedding向量（和 [CLS] token）进行逐元素相加。</p><p>结果：现在我们得到了一个 (N + 1, D) 的序列，它既包含了图像的视觉内容信息，也包含了每个Patch在原始图像中的空间位置信息。</p></li><li><p><strong>Transformer Encoder (标准Transformer编码器)</strong></p></li></ol><h2 id="卓驭科技-高性能计算-一面-09-02" tabindex="-1"><a class="header-anchor" href="#卓驭科技-高性能计算-一面-09-02"><span>卓驭科技-高性能计算（一面，09.02）</span></a></h2><h3 id="_1-大小模型联合保护方案介绍一下-模型的微调目标是什么" tabindex="-1"><a class="header-anchor" href="#_1-大小模型联合保护方案介绍一下-模型的微调目标是什么"><span>1. 大小模型联合保护方案介绍一下，模型的微调目标是什么？</span></a></h3><h3 id="_2-实习经历里面的低比特量化是怎么实现的-介绍一下awq量化和gptq量化、还有autoround。" tabindex="-1"><a class="header-anchor" href="#_2-实习经历里面的低比特量化是怎么实现的-介绍一下awq量化和gptq量化、还有autoround。"><span>2. 实习经历里面的低比特量化是怎么实现的？介绍一下AWQ量化和GPTQ量化、还有AutoRound。</span></a></h3><p>AWQ-4bit</p><p>AWQ：优先保护1%的重要权重</p><p>GPTQ：利用二阶信息（Hessian 矩阵），将权重量化问题形式化为一个约束优化问题。最小化输出误差。</p><p>AutoRound：是一种<strong>逼近全参数微调（FPQ）的PTQ方法</strong>。将舍入视为一个优化问题，<strong>直接使用梯度下降来学习每个权重应该向上还是向下舍入</strong>。它引入了连续松弛（例如，使用sigmoid函数将离散的舍入决策连续化），使得可以直接通过反向传播和Adam等优化器来更新舍入策略，从而更精确地最小化输出损失。</p><p>简单比喻AutoRound：就是一个一个机器学习模型，它的唯一任务就是学习“每个权重该如何舍入”这个决策，通过不断试错（梯度下降）来找到最优解。</p><h3 id="_3-实习经历的昇腾优化主要做了哪些" tabindex="-1"><a class="header-anchor" href="#_3-实习经历的昇腾优化主要做了哪些"><span>3. 实习经历的昇腾优化主要做了哪些？</span></a></h3><ol><li>Attention -&gt; Sdpa attention （核心算子）</li><li>大batch -&gt; 切分为mini-batch(padding 以及minibatch直接输出)</li></ol><h3 id="_4-昇腾npu上的attention是怎么做的" tabindex="-1"><a class="header-anchor" href="#_4-昇腾npu上的attention是怎么做的"><span>4. 昇腾NPU上的attention是怎么做的？</span></a></h3><h4 id="_4-1-flash-attention主要是对n卡做的适配嘛-这种架构能在npu上实现吗" tabindex="-1"><a class="header-anchor" href="#_4-1-flash-attention主要是对n卡做的适配嘛-这种架构能在npu上实现吗"><span>4.1 flash attention主要是对N卡做的适配嘛，这种架构能在NPU上实现吗？</span></a></h4><p>确实代码是对N卡的适配，但是这个优化的思想是共通的。NPU也有对应的片上缓存，也可以做相应的算法适配。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-2-n卡上主要是对share-mem做的一些优化-那么对应到npu上-是对应哪个层级" tabindex="-1"><a class="header-anchor" href="#_4-2-n卡上主要是对share-mem做的一些优化-那么对应到npu上-是对应哪个层级"><span>4.2 N卡上主要是对share mem做的一些优化，那么对应到NPU上，是对应哪个层级？</span></a></h4><p>NVIDIA GPU上优化所依赖的<strong>Shared Memory，在昇腾NPU上最主要对应的是 L1 Buffer（也称为Unified Buffer）</strong>。二者一个重要的区别是：Shared Memory需要程序员手动管控，Unified Buffer是自动管理的。（手动挡 vs 自动挡）</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-大模型推理的算子写过哪些" tabindex="-1"><a class="header-anchor" href="#_5-大模型推理的算子写过哪些"><span>5. 大模型推理的算子写过哪些？</span></a></h3><p>softmax, gemm, rmsnorm ....</p><h3 id="_6-讲一下优化一个算子的工作流-会采用哪些分析和优化的工具" tabindex="-1"><a class="header-anchor" href="#_6-讲一下优化一个算子的工作流-会采用哪些分析和优化的工具"><span>6. 讲一下优化一个算子的工作流？会采用哪些分析和优化的工具？</span></a></h3><p><strong>像gemm的话，可以调整一些block size来提升速度嘛。这种可以通过nsight来观测到吗？或者你可以看哪些指标来提示你比如说：gird size的问题，还是shared mem利用率的问题， 还是指令的利用率等等问题？</strong></p><ol><li>理论 Occupancy 和 实际 Occupancy：二者都低表示blocksize太小了，前高后低表示内存瓶颈导致Warp长时间停滞，无法有效调度。</li><li>Registers Per Thread 和 Shared Memory Per Block：这两个值直接决定了每个SM能容纳多少个Block。</li><li>Memory Utilization： 如果这个值很高（例如 &gt;80%），而计算利用率很低，说明你的内核是内存受限（Memory-Bound） 的。</li><li>L1/TEX Cache Hit Rate 和 L2 Cache Hit Rate：表示各级cache的命中率</li><li>Shared Memory Bank Conflicts</li></ol><p><strong>ncu的occupancy 占用率的物理含义是什么？</strong></p><p>Occupancy（占用率）： <strong>Block大小和每个SM的寄存器/共享内存使用量共同决定了占用率</strong>，即<strong>每个SM上活跃的Warp数量与最大可能数量的比率</strong>。一个常见的<strong>误解是占用率越高越好，但实际上，这只是一个起点</strong>。 过高的占用率可能会因为寄存器或共享内存不足而无法实现，或者挤占了缓存资源。通常需要一个平衡点（例如50%-75%），为每个线程分配更多寄存器或共享内存有时比100%占用率性能更好。</p><h3 id="_7-推理框架有参考哪些开源项目吗" tabindex="-1"><a class="header-anchor" href="#_7-推理框架有参考哪些开源项目吗"><span>7. 推理框架有参考哪些开源项目吗？</span></a></h3><p>vllm、 nano-vllm、 kuperler</p><h3 id="_8-推理框架那个项目特意提到一个模型封装-你可以讲一下模型是如何序列化和反序列化加载到推理框架中的" tabindex="-1"><a class="header-anchor" href="#_8-推理框架那个项目特意提到一个模型封装-你可以讲一下模型是如何序列化和反序列化加载到推理框架中的"><span>8. 推理框架那个项目特意提到一个模型封装，你可以讲一下模型是如何序列化和反序列化加载到推理框架中的？</span></a></h3><p><strong>序列化主要封装模型的如下信息：</strong></p><ol><li><p>模型结构 (计算图) ： 算子 + 算子连接关系 + 输入输出的张量类型</p></li><li><p>模型参数 (权重与偏置) ： 权重 + 偏置 + 状态层信息</p></li><li><p>元数据 (上下文信息) ： 版本信息 + 优化信息 + 模型签名等</p></li></ol><p><strong>反序列化：</strong></p><ol><li><p>验证模型信息</p></li><li><p>计算图重建</p></li><li><p>权重等参数加载</p></li><li><p>高级图优化（最关键的一步）：常量折叠（将可提前计算的数字算好） + 算子融合 + 内存规划</p></li><li><p>硬件特定优化：不同硬件平台底层后端计算库的调用</p></li></ol><h4 id="_8-1-一般模型有一个序列化格式-也叫封装格式。例如onnx-这些模型里面数据是怎么存储的" tabindex="-1"><a class="header-anchor" href="#_8-1-一般模型有一个序列化格式-也叫封装格式。例如onnx-这些模型里面数据是怎么存储的"><span>8.1 一般模型有一个序列化格式，也叫封装格式。例如onnx，这些模型里面数据是怎么存储的？</span></a></h4><p>它用<strong>Protocol Buffers定义了结构</strong>。</p><p>它用 <strong>GraphProto</strong> 描述了模型的<strong>计算图</strong>（算子、连接关系、输入输出规范）。</p><p>它用 <strong>TensorProto</strong> 中的 raw_data 字段，以紧凑的<strong>二进制块</strong>形式高效存储了所有的<strong>权重参数</strong>。</p><h3 id="_9-c-三大特性-封装、继承、多态讲一下" tabindex="-1"><a class="header-anchor" href="#_9-c-三大特性-封装、继承、多态讲一下"><span>9. C++三大特性：封装、继承、多态讲一下？</span></a></h3><ol><li><p>封装（类，通过private保护）</p><p>核心思想：将数据（属性）和操作这些数据的方法（函数）捆绑在一起，形成一个独立的单元（即类），并对对象的内部实现细节进行访问权限控制，只对外提供有限的接口。</p></li><li><p>继承</p><p>核心思想：允许我们依据一个已有的类（基类/父类）来定义一个新的类（派生类/子类）。子类自动获得父类的特性和行为，并可以添加自己新的特性和行为，或修改父类的行为。</p></li><li><p>多态（虚函数）</p><p>核心思想：字面意思是“多种形态”。在C++中，它指的是使用基类的指针或引用来调用一个方法，但实际执行的是派生类中重写的方法。即“一个接口，多种实现”。</p></li></ol><h4 id="_9-1-推理引擎中有哪些设计会用到多态呢" tabindex="-1"><a class="header-anchor" href="#_9-1-推理引擎中有哪些设计会用到多态呢"><span>9.1 推理引擎中有哪些设计会用到多态呢？</span></a></h4><p>推理引擎需要支持<strong>多种硬件平台</strong>（CPU, GPU, NPU, TPU等）。同一算子在不同硬件上的实现完全不同。</p><p>模型可能使用不同的<strong>数据类型</strong>（FP32, FP16, INT8, BF16）进行计算，同一算子在处理不同数据类型时实现也不同。</p><h4 id="_9-2-多态为什么可以对一个函数实现多种不同的实现-原理是什么" tabindex="-1"><a class="header-anchor" href="#_9-2-多态为什么可以对一个函数实现多种不同的实现-原理是什么"><span>9.2 多态为什么可以对一个函数实现多种不同的实现？原理是什么？</span></a></h4><p>原理是<strong>虚函数</strong></p><p>主要通过**虚函数表 (vtable) 和虚函数表指针 (vptr)**来实现。</p><h3 id="_10-科学计算的高性能计算-与-ai里面用到的高性能计算有什么不同" tabindex="-1"><a class="header-anchor" href="#_10-科学计算的高性能计算-与-ai里面用到的高性能计算有什么不同"><span>10. 科学计算的高性能计算 与 AI里面用到的高性能计算有什么不同？</span></a></h3><ol><li>精度不同：高精度 vs 低精度</li><li>科学计算基本上是计算密集型为主<br> 见小米一面第二题</li></ol><h3 id="_11-mpi是为什么用呢-是比较传统还是说就是在科学仿真中有特殊用处呢" tabindex="-1"><a class="header-anchor" href="#_11-mpi是为什么用呢-是比较传统还是说就是在科学仿真中有特殊用处呢"><span>11. MPI是为什么用呢？是比较传统还是说就是在科学仿真中有特殊用处呢？</span></a></h3><p>（面试官：所以其实还是因为传统，如果能够再来一次的话其实大家就会选择用<strong>妮蔻？？？</strong>，都用这些GPU语态下的技术了，就不用MPI了）</p><h3 id="_12-之前对卓驭有什么了解-自动驾驶领域用的一些技术有啥了解吗" tabindex="-1"><a class="header-anchor" href="#_12-之前对卓驭有什么了解-自动驾驶领域用的一些技术有啥了解吗"><span>12. 之前对卓驭有什么了解？自动驾驶领域用的一些技术有啥了解吗？</span></a></h3><p>端到端，VLA？</p><p>（面试官：现在用的这种模型就不像传统视觉的一些Yolo类似的小模型了，它的规模会比较大，但是它也不会像自回归的大语言模型那样走，因为它更关注实时性。 所以它一方面会有这种VIT（vision transformer）这样的决策规划模型的组合的变种来组合的一个端到端模型。另外的话，它在VLA的技术方案中也会有一些自回归架构的模型去应用。 但是也不乏会有一些低频的场景会用传统cv模型来做一些事情的。）</p><p><strong>想要做自动驾驶领域的高性能计算，你觉得要具备哪些方面的知识和技能？</strong></p><p>深度学习、大模型</p><p>如上所说，自动驾驶中有很多也用到了自回归架构的模型，因此很多的优化思路是和LLM通用的，但是它不见的会像大语言模型那样去以max token、 TTFT等为主。</p><h3 id="_13-有用过英伟达的tensorrt-tensorrt-llm跑过一些模型吗" tabindex="-1"><a class="header-anchor" href="#_13-有用过英伟达的tensorrt-tensorrt-llm跑过一些模型吗"><span>13. 有用过英伟达的TensorRT，TensorRT-LLM跑过一些模型吗？</span></a></h3><p>有 TensorRT+onnx 实习的那个</p><h3 id="_14-反问" tabindex="-1"><a class="header-anchor" href="#_14-反问"><span>14.反问</span></a></h3><ol><li>自动驾驶的高性能计算需要做的东西？（见12题面试官回答）</li><li>组里在做的事情？主要是做模型的部署优化，具体一方面是会针对硬件平台的特性去优化模型结构让它跑的更快，另外一方面也做一些算子的开发和优化。另外会开发一些模型推理框架来提升模型部署的性能和效率。</li><li>用的硬件平台有哪些？英伟达、高通、德州仪器、还有一家国产的。现在所做的推理引擎要实现的目标就是把不同平台给统一，引擎内部针对不同的后端来做优化。</li><li>部门架构？高性能计算的组是以端侧为主。有一个机器学习平台那个是做云端的，主要是围绕一些数据闭环，训练优化等等。</li><li>如果想进入自动驾驶领域，需要提升的方面？汽车本身是个大电子平台，需要关注一些汽车行业内的知识。包括自动驾驶是一个软硬协同的工作，需要对计算机体系架构要有一定的了解，要有一些AI的软件技术栈，各种高性能计算的接口等等吧。</li></ol><h2 id="深信服科技" tabindex="-1"><a class="header-anchor" href="#深信服科技"><span>深信服科技</span></a></h2><h3 id="_1-hr电话-25-06-03-09-00" tabindex="-1"><a class="header-anchor" href="#_1-hr电话-25-06-03-09-00"><span>1. HR电话(25.06.03 09:00)</span></a></h3><ol><li><p>你们实验室是做这个方向的吗？</p><p>我们实验室分四个方向（计算流体（深度学习）、多相流、介观方法、高性能计算），其中之一就是做并行计算的。团队比较大，一个大导师带着二十多个人。目前有一个博士和两个硕士，博士是做并行计算（HPC-科学计算）的，做算法的。（下次这样说：博士是做算法和并行计算的，带我的博后是做深度学习的。整个方向比较的多学科交叉。之前的多GPU项目主要是博士师兄带着做，科研的方向主要由这个博后带着做。至于另一个硕士，她对这行没想法，一心考公。 大模型这方向确实不是我们的只要研究，推理加速这个是我的个人兴趣。）</p></li><li><p>带你的这个博士是第几年？</p><p>这个博士是第五年，马上要毕业了（今年冬天或者明年毕业）。</p></li></ol>',109))])}]]),h=JSON.parse('{"path":"/zh/posts/interview1.html","title":"八股面试","lang":"zh-CN","frontmatter":{"title":"八股面试","date":"2025-06-03T00:00:00.000Z","readingTime":600,"category":["笔记"],"tag":["八股面试"],"isOriginal":true,"description":"简介 记录一些面试问题。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"八股面试\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-06-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-09-21T03:42:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GYQ\\",\\"url\\":\\"https://github.com/Summer536\\"}]}"],["meta",{"property":"og:url","content":"https://your-domain.com/Notes/zh/posts/interview1.html"}],["meta",{"property":"og:site_name","content":"GYQ的博客"}],["meta",{"property":"og:title","content":"八股面试"}],["meta",{"property":"og:description","content":"简介 记录一些面试问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-21T03:42:09.000Z"}],["meta",{"property":"article:tag","content":"八股面试"}],["meta",{"property":"article:published_time","content":"2025-06-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-21T03:42:09.000Z"}]]},"git":{"createdTime":1748915646000,"updatedTime":1758426129000,"contributors":[{"name":"yqgao","username":"yqgao","email":"gaoyuqing536@gmail.com","commits":5,"url":"https://github.com/yqgao"}]},"readingTime":{"minutes":16.13,"words":4840},"filePathRelative":"zh/posts/interview1.md","excerpt":"\\n<h2>简介</h2>\\n<p>记录一些面试问题。</p>\\n","autoDesc":true}')},6262:(a,n)=>{n.A=(a,n)=>{const e=a.__vccOpts||a;for(const[a,r]of n)e[a]=r;return e}}}]);