"use strict";(self.webpackChunkvuepress=self.webpackChunkvuepress||[]).push([[1430],{5684:(a,s,n)=>{n.r(s),n.d(s,{comp:()=>c,data:()=>o});var t=n(641);const e=n.p+"assets/img/static_batch.dacd67b8.png",p=n.p+"assets/img/batchsize.a54591a4.png",m=n.p+"assets/img/dynamic_batch.9fb1ecd8.png",i=n.p+"assets/img/dynamic_batch2.429d4966.png",l=n.p+"assets/img/Ssampling.f434d000.png",r=n.p+"assets/img/Ssampilng1.e7497371.png",h={},c=(0,n(6262).A)(h,[["render",function(a,s){return(0,t.uX)(),(0,t.CE)("div",null,[s[0]||(s[0]=(0,t.Lk)("h1",{id:"inference服务的一些常见问题",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#inference服务的一些常见问题"},[(0,t.Lk)("span",null,"Inference服务的一些常见问题")])],-1)),s[1]||(s[1]=(0,t.Lk)("h2",{id:"简介",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#简介"},[(0,t.Lk)("span",null,"简介")])],-1)),s[2]||(s[2]=(0,t.Lk)("p",null,"记录一些常见的推理服务问题。",-1)),(0,t.Q3)(" more "),s[3]||(s[3]=(0,t.Fv)('<h2 id="一-大模型推理为什么要分为prefill和decode两个阶段-必须分开吗" tabindex="-1"><a class="header-anchor" href="#一-大模型推理为什么要分为prefill和decode两个阶段-必须分开吗"><span>一. 大模型推理为什么要分为prefill和decode两个阶段？必须分开吗？</span></a></h2><h3 id="_1-什么是-prefill-阶段" tabindex="-1"><a class="header-anchor" href="#_1-什么是-prefill-阶段"><span>1. 什么是 Prefill 阶段？</span></a></h3><p>在大语言模型的推理中，Prefill 阶段 是指处理输入提示（prompt）部分的过程：</p><ul><li>输入：用户提供的初始 prompt（例如“讲个故事”）</li><li>输出：生成与 prompt 对应的 key/value 缓存（KV Cache），并输出第一个预测 token 的 logits</li><li>特点： <ul><li>输入长度较长（可能几百到几千 tokens）</li><li><strong>是一个密集的 attention 计算过程（可并行）</strong></li><li>一次性处理整个 prompt，不产生新 token，只是准备 KV Cache，为后续 decode 做准备</li></ul></li></ul><h3 id="_2-什么是-decode-阶段" tabindex="-1"><a class="header-anchor" href="#_2-什么是-decode-阶段"><span>2. 什么是 Decode 阶段？</span></a></h3><p>Decode 阶段 是从第一个预测 token 开始，逐步生成后续 token 的过程：</p><ul><li>每次只预测一个 token（或少量 token）</li><li>使用之前缓存的 key/value（KV Cache）加速 attention 计算</li><li>迭代进行，直到达到最大长度或遇到终止符（如 EOS）</li><li>特点： <ul><li><strong>每步只处理一个 token（意味着对于同一个序列，无法并行）</strong></li><li>利用 KV Cache 实现高效 attention</li></ul></li></ul><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-为什么需要分开-prefill-和-decode-两个阶段" tabindex="-1"><a class="header-anchor" href="#_3-为什么需要分开-prefill-和-decode-两个阶段"><span>3. 为什么需要分开 Prefill 和 Decode 两个阶段？</span></a></h3><ol><li>计算模式不同，<strong>前者可并行，后者不可并行</strong></li><li>KV Cache 管理优化，前者生成整个prompt的KV Cache，后者在每一步更新KV Cache（添加新生成的那个token到kvcache中）</li><li>吞吐 vs 延迟的权衡，Prefill 关注的是整体延迟（prompt 越长越耗时），Decode 关注的是生成每个 token 的响应时间（即“首字延迟”和“逐字延迟”）</li><li>批处理优化（Batching）</li></ol><ul><li>在服务端，多个请求可以共享 prefill 阶段（batched prefill，这个和连续批处理不一样，Batched Prefill 就是将多个用户的 prompt 同时进行预处理（即同时运行它们的 attention 计算），从而提升 GPU 利用率和整体吞吐量。）</li><li>Decode 阶段则更难合并，因为每个请求生成的 token 序列不同（decode阶段使用的是连续批处理技术，具体见下方介绍）</li></ul><p><strong>vLLM、TensorRT-LLM、DeepSpeed、HuggingFace Transformers</strong> 等 框架都会显式地将推理划分为 prefill 和 decode 阶段，以提升效率。</p><h2 id="二-介绍一下batch、batch-size、以及动态批-dynamic-batching-处理技术" tabindex="-1"><a class="header-anchor" href="#二-介绍一下batch、batch-size、以及动态批-dynamic-batching-处理技术"><span>二. 介绍一下batch、batch size、以及动态批(dynamic batching)处理技术？</span></a></h2><h3 id="_1-什么是batch" tabindex="-1"><a class="header-anchor" href="#_1-什么是batch"><span>1. 什么是batch？</span></a></h3><p>在传统的深度学习推理中，比如图像分类任务：所有请求先被收集起来达到固定 batch size后统一处理，处理完这个 batch 后再处理下一个。这个收集起来的任务就叫做一个batch。</p><p>在大模型推理中，<strong>batch 是多个用户请求的集合，每个请求包含一个或多个 prompt</strong>。也就是说一个batch中会包含不同用户发来的多个序列。</p><h3 id="_2-什么是batch-size" tabindex="-1"><a class="header-anchor" href="#_2-什么是batch-size"><span>2. 什么是batch size？</span></a></h3><p>Batch size 是每次处理请求的序列数量。</p><p>例如下图，我们将四个用户的请求收集起来，组成一个batch，然后进行推理。此时 <strong>batch size = 4</strong>。<br> 如果我们设置batch size = 3，那么它只会收集前三个用户的请求然后处理，处理完成后第四个请求组成一个新的batch开始处理。<br><img src="'+p+'" alt="" loading="lazy"></p><p>这里注意，一个batch中的不同序列可以有不同的长度。而不同长度也同时造成了GPU并行处理的困难。</p><p>为了统一 batch 内所有序列的长度，通常会对较短的序列进行 padding（比如用 token ID = 0 填充）<br> 这样整个 batch 变成一个矩形矩阵（batch_size × max_seq_len），然后送入GPU进行并行处理。</p><p>Padding 带来的问题：</p><ul><li>浪费计算资源（对 padding token 的 attention 计算无意义）</li><li>占用更多内存（KV Cache 也必须为最长序列预留空间）</li></ul><p>为解决这一问题，引入了PagedAttention（页式注意力缓存）、DynamicBatching（动态批处理）技术等新技术。</p><h3 id="_3-什么是动态批-dynamic-batching-处理技术" tabindex="-1"><a class="header-anchor" href="#_3-什么是动态批-dynamic-batching-处理技术"><span>3. 什么是动态批(dynamic batching)处理技术？</span></a></h3><p>上面第2点讲到，在decoder阶段，GPU会并行处理一个batch中的多个序列，这些序列生成回答的长度是不同的。如果一个batch中所有序列都生成完了，GPU才会处理下一个batch。<br><img src="'+m+'" alt="" loading="lazy"></p><p>那么举一个极端的例子，假如batchsize = 4，我们同时处理4个序列的推理生成，其中3个序列只回答了50个token，而有1个序列回答了5000个token。那么GPU必须等待这一个序列生成完毕，才能接受新的batch也就是4个新的序列。这就造成了极大的资源浪费。</p><p>动态批处理的本质就是让<strong>GPU在处理一个batch的过程中，不断接受新的请求，并根据请求的长度动态调整batch size</strong>。</p><ol><li>用户请求不断到来</li><li>推理引擎维护一个“正在运行”的 batch</li><li>新请求会被尝试添加进当前 batch（如果还有空间）</li><li>如果 batch 已满或达到一定时间窗口，则启动一次推理</li><li>在推理过程中，部分序列可能会完成（输出结束）</li><li>完成的序列位置可以被新请求替代 → 形成新的 batch</li><li>这个过程不断循环，保持 GPU 高利用率</li></ol><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图显示了通过连续批处理技术连续完成 7 个序列的推理情况。左图显示了第一次迭代后的批次，右图显示了几次迭代后的批次。每当一个序列发出终止 token 时，我们会将一个新的序列插入其位置（例如序列 S5、S6 和 S7），这样 GPU 无需等待所有序列完成即可开始处理新的序列，从而实现更高的 GPU 利用率。</p><h2 id="三-推理引擎一般都可以设置哪些参数-以vllm为例" tabindex="-1"><a class="header-anchor" href="#三-推理引擎一般都可以设置哪些参数-以vllm为例"><span>三. 推理引擎一般都可以设置哪些参数(以vLLM为例)？</span></a></h2><p>✅ 1. --host 和 --port<br> 作用：指定 HTTP 服务监听的地址和端口</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--host</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.0.0.0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --port</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 2. --max-model-len（最大序列长度）</p><p>控制模型能处理的最大 prompt + output token 数量,默认值通常为 4096 或根据模型设定<br> 长 prompt 会占用更多显存和计算资源</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--max-model-len</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8192</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 3. --max-num-seqs（最大并发请求数）</p><p><strong>控制同时进行 decode 的最大序列数量（即 batch size 上限）</strong><br> 影响吞吐和延迟平衡</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--max-num-seqs</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 4. --max-prefill-tokens（prefill 阶段最大 token 总数）</p><p>控制单个 prefill batch 中所有 prompt 的总 token 数<br> 避免因长 prompt 导致 prefill 耗时过长或内存爆炸</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--max-prefill-tokens</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8192</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 5. --max-batched-token-mem（最大 batch token 显存）</p><p>控制分配给 KV Cache 的最大显存大小（单位是 token 数量）<br> 可防止多个长 prompt 同时进入导致 OOM</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--max-batched-token-mem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8192</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 6. --swap-space（交换空间）</p><p>指定临时存储 KV Cache 的 CPU 内存大小<br> 当 GPU 显存不足时，部分序列会被“换出”到 CPU</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--swap-space</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 7. --gpu-memory-utilization（GPU 显存利用率）</p><p>控制用于 KV Cache 的显存比例（默认 0.9）<br> 设置太大会导致 OOM，太小则浪费资源</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--gpu-memory-utilization</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 8. --max-input-length（最大输入长度）</p><p>控制每个请求中 prompt 的最大 token 数<br> 防止用户提交超长 prompt 导致服务不稳定</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--max-input-length</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8192</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>✅ 9. --max-output-length（最大输出长度）</p><p>控制每个请求最多生成多少个 token<br> 防止无限生成或长时间占用资源</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--max-output-length</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="四-如何针对不同推理场景-单人、多用户、单卡、多卡-设置相应的参数最大化利用gpu性能" tabindex="-1"><a class="header-anchor" href="#四-如何针对不同推理场景-单人、多用户、单卡、多卡-设置相应的参数最大化利用gpu性能"><span>四. 如何针对不同推理场景（单人、多用户、单卡、多卡）设置相应的参数最大化利用GPU性能？</span></a></h2><p>待更新</p><h2 id="五-介绍一下投机推理-speculative-decoding" tabindex="-1"><a class="header-anchor" href="#五-介绍一下投机推理-speculative-decoding"><span>五. 介绍一下投机推理（Speculative Decoding）？</span></a></h2><p>投机采样是一种可以从根本上解码计算访存比的方法，保证和使用原始模型的采样分布完全相同。<strong>它使用两个模型：一个是原始目标模型，另一个是比原始模型小得多的近似模型。近似模型用于进行自回归串行采样，而大型模型则用于评估采样结果</strong>。解码过程中，某些token的解码相对容易，某些token的解码则很困难。因此，简单的token生成可以交给小型模型处理，而困难的token则交给大型模型处理。这里的小型模型可以采用与原始模型相同的结构，但参数更少，或者干脆使用n-gram模型。小型模型不仅计算量较小，更重要的是减少了内存访问的需求。</p><h3 id="投机采样过程如下" tabindex="-1"><a class="header-anchor" href="#投机采样过程如下"><span>投机采样过程如下：</span></a></h3><ol><li>用小模型 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">M_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 做自回归采样连续生成 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span> 个 tokens。</li><li>把生成的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span> 个 tokens 和前缀拼接一起送进大模 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">M_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 执行一次 forwards。</li><li>使用大、小模型 logits 结果做比对，如果发现某个 token 小模型生成的不好，重新采样这个 token。重复步骤 1。</li><li>如果小模型生成结果都满意，则用大模型采样下一个 token。重复步骤 1。</li></ol><p>第 2 步中，将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span> 个 tokens 和前缀拼成一起作为大模型输入，和自回归相比，尽管计算量一样，但是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span> 个 tokens 可以同时参与计算，计算访存比显著提升。</p><p>第 3 步中，如何评价一个 token 生成的好坏？如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x) &gt; p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo separator="true">,</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">p, q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> 表示在大小模型采样概率，也就是 logits 归一化后的概率分布），则以一定 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">1 - \\frac{p(x)}{q(x)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的概率拒绝这个 token 的生成，从一个新的概率分布 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mtext>norm</mtext><mo stretchy="false">(</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>−</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p&#39;(x) = \\text{norm}(\\max(0, p(x) - q(x)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">norm</span></span><span class="mopen">(</span><span class="mop">max</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)))</span></span></span></span> 中重新采样一个 token。</p><p><strong>通俗来讲就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x) &lt; q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的时候应该是小模型分布和大模型的分布存在突变(小模型出错的地方), 需要一定概率放弃, 然后从正常部分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[p(x)&gt;q(x)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)]</span></span></span></span>的分布中去采样。</strong></p><p>我们看性能分析结果，下图是一个 encoder-decoder 结构网络的时间分解图。顶部一行显示了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">\\gamma=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7</span></span></span></span> 的投机采样，中间一行显示了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\\gamma=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 的投机解码，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span> 是小模型一次生成 token 的数目。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>p</mi></msub></mrow><annotation encoding="application/x-tex">M_p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 是大模型，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">M_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 是小模型。可见，使用投机采样，解码时间大幅缩减。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="不同的投机采样策略" tabindex="-1"><a class="header-anchor" href="#不同的投机采样策略"><span>不同的投机采样策略</span></a></h3><p>除了采用大小模型外，还有其他的一些方法进行投机推理,如线性头方案、前缀树方案。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="投机解码是如何起作用的-为什么在高并发下没有甚至倒退" tabindex="-1"><a class="header-anchor" href="#投机解码是如何起作用的-为什么在高并发下没有甚至倒退"><span>投机解码是如何起作用的？为什么在高并发下没有甚至倒退？</span></a></h3><p>投机解码本身是解决推理过程中的memory Bound的问题的。而在高并发下，推理变成了一个compute Bound的问题，因此效果不明显。</p><h3 id="投机解码究竟省了什么" tabindex="-1"><a class="header-anchor" href="#投机解码究竟省了什么"><span>投机解码究竟省了什么？</span></a></h3><p>首先，计算量肯定是没省的。<br> A.因为引入了小模型，它计算生成候选token的时候会增加一些计算量。<br> B.另外大模型并行验证K个候选token时，虽然只需要一次前向传播，但这次前向传播的计算量要比生成单个token时大（需要对K个token位置的logits进行计算和比较）。<br> C.还有就是小模型计算出来的候选序列有什么会被拒绝，那么这些token的计算相当于是白走了一次计算。</p><p>因此肯定是节省了访存，因为多个token和单个token访存速度差不多（都远远没有没打满带宽）所以减少访存次数是最重要的。<br> 另外因为一次生成多个token，相比于每次生成一个token，它还减少了对KVcache的访问次数，以及kernel的启动和访存次数。（K次-&gt;1次）</p><p>减少了对什么的访存次数？权重矩阵、KVcache、kernel启动和访存次数</p><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h3><ol><li><p><a href="https://zhuanlan.zhihu.com/p/651359908" target="_blank" rel="noopener noreferrer">大模型推理妙招—投机采样（Speculative Decoding）</a></p></li><li><p><a href="https://proceedings.mlr.press/v202/leviathan23a/leviathan23a.pdf" target="_blank" rel="noopener noreferrer">Fast Inference from Transformers via Speculative Decoding</a></p></li></ol><h2 id="六-介绍一下deppseek的mla-针对hopper架构的优化-hopper架构还引入了不同block得thread之间的共享内存机制" tabindex="-1"><a class="header-anchor" href="#六-介绍一下deppseek的mla-针对hopper架构的优化-hopper架构还引入了不同block得thread之间的共享内存机制"><span>六. 介绍一下Deppseek的MLA（针对Hopper架构的优化），Hopper架构还引入了不同block得thread之间的共享内存机制？</span></a></h2><h3 id="_1-什么是低秩压缩" tabindex="-1"><a class="header-anchor" href="#_1-什么是低秩压缩"><span>1. 什么是低秩压缩？</span></a></h3><p>低秩压缩是一种<strong>利用矩阵的低秩近似特性来显著减少数据存储量或模型参数量的技术</strong>。它的核心思想基于线性代数中的一个重要概念：矩阵的秩。</p><ol><li><p><strong>秩是什么？</strong></p><ul><li>一个矩阵的秩衡量的是其行（或列）向量中线性无关的最大数目。</li><li>简单理解，秩代表了矩阵所包含的独立信息或内在维度的数量。</li><li>例如： <ul><li>一个单位矩阵（对角线为 1，其余为 0）的秩等于其维度（满秩）。</li><li>一个所有元素都是 1 的矩阵，秩为 1（因为所有行/列都线性相关）。</li><li>一个包含两行完全相同数据的矩阵，秩为 1（因为第二行不提供新信息）。</li></ul></li></ul></li><li><p><strong>低秩矩阵：</strong></p><ul><li>如果一个矩阵的实际秩 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 远小于它的维度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\min(m, n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>（其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 是行数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 是列数），那么这个矩阵就被认为是低秩的。</li><li>很多现实世界的数据（如图像、用户-物品评分矩阵、某些神经网络层的权重更新）天然具有或近似具有低秩特性。这意味着它们包含的信息可以被更少的“基础”成分有效地表示。</li></ul></li><li><p><strong>低秩近似/压缩：</strong></p><ul><li>给定一个大型矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>（维度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>），低秩压缩的目标是找到两个较小的矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>（维度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>×</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">m \\times r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>）和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>（维度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">r \\times n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>），使得它们的乘积 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>⋅</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A \\cdot B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 尽可能地接近原始矩阵 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span>。</li><li>这里的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 就是目标秩，并且 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>≪</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r \\ll \\min(m, n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≪</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>。</li><li>关键点：<strong>存储 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span> 只需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>⋅</mo><mi>r</mi><mo>+</mo><mi>r</mi><mo>⋅</mo><mi>n</mi><mo>=</mo><mi>r</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m \\cdot r + r \\cdot n = r \\cdot (m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 个参数，而存储原始 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 需要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>⋅</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \\cdot n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个参数。因为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 很小，所以 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r \\cdot (m + n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 远小于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>⋅</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m \\cdot n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，实现了显著的压缩。</strong></li><li>数学基础：最优的低秩近似通常通过奇异值分解（SVD）来实现。SVD 将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi></mrow><annotation encoding="application/x-tex">W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span></span> 分解为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>⋅</mo><mi mathvariant="normal">Σ</mi><mo>⋅</mo><msup><mi>V</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">U \\cdot \\Sigma \\cdot V^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Σ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Σ</mi></mrow><annotation encoding="application/x-tex">\\Sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Σ</span></span></span></span> 是一个包含奇异值（按重要性降序排列）的对角矩阵。保留前 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 个最大的奇异值及其对应的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span> 的列向量，就得到了秩为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的最佳近似。</li></ul></li></ol><h3 id="_2-mla" tabindex="-1"><a class="header-anchor" href="#_2-mla"><span>2. MLA</span></a></h3><p>请直接阅读文章<a href="https://summer536.github.io/Notes/zh/posts/Deepseek_MLA.html" target="_blank" rel="noopener noreferrer">DeepSeek_MLA</a></p><h3 id="参考资料-1" tabindex="-1"><a class="header-anchor" href="#参考资料-1"><span>参考资料</span></a></h3><ul><li><a href="https://zhuanlan.zhihu.com/p/16730036197" target="_blank" rel="noopener noreferrer">deepseek技术解读(1)-彻底理解MLA（Multi-Head Latent Attention）</a></li><li><a href="https://spaces.ac.cn/archives/10091" target="_blank" rel="noopener noreferrer">缓存与效果的极限拉扯：从MHA、MQA、GQA到MLA</a></li><li><a href="https://zhuanlan.zhihu.com/p/21366443341" target="_blank" rel="noopener noreferrer">MLA原理介绍（极简版）</a></li><li><a href="https://chat.deepseek.com/a/chat/s/44ba73d0-0e08-450b-9b3f-98de2eaaed6d" target="_blank" rel="noopener noreferrer">somequestion-deepseek</a></li></ul>',88))])}]]),o=JSON.parse('{"path":"/zh/posts/Inference.html","title":"Inference服务的一些常见问题","lang":"zh-CN","frontmatter":{"title":"Inference服务的一些常见问题","date":"2025-05-22T00:00:00.000Z","readingTime":600,"category":["笔记"],"tag":["GPU优化","大模型"],"isOriginal":true,"description":"简介 记录一些常见的推理服务问题。","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Inference服务的一些常见问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-29T13:00:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GYQ\\",\\"url\\":\\"https://github.com/Summer536\\"}]}"],["meta",{"property":"og:url","content":"https://your-domain.com/Notes/zh/posts/Inference.html"}],["meta",{"property":"og:site_name","content":"GYQ的博客"}],["meta",{"property":"og:title","content":"Inference服务的一些常见问题"}],["meta",{"property":"og:description","content":"简介 记录一些常见的推理服务问题。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-29T13:00:11.000Z"}],["meta",{"property":"article:tag","content":"大模型"}],["meta",{"property":"article:tag","content":"GPU优化"}],["meta",{"property":"article:published_time","content":"2025-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-29T13:00:11.000Z"}]]},"git":{"createdTime":1747884405000,"updatedTime":1753794011000,"contributors":[{"name":"yqgao","username":"yqgao","email":"gaoyuqing536@gmail.com","commits":5,"url":"https://github.com/yqgao"}]},"readingTime":{"minutes":12.39,"words":3717},"filePathRelative":"zh/posts/Inference.md","excerpt":"\\n<h2>简介</h2>\\n<p>记录一些常见的推理服务问题。</p>\\n","autoDesc":true}')},6262:(a,s)=>{s.A=(a,s)=>{const n=a.__vccOpts||a;for(const[a,t]of s)n[a]=t;return n}}}]);