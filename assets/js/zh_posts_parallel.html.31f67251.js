"use strict";(self.webpackChunkvuepress=self.webpackChunkvuepress||[]).push([[9958],{6227:(a,s,n)=>{n.r(s),n.d(s,{comp:()=>u,data:()=>P});var t=n(641);const e=n.p+"assets/img/dp.83f80ae5.png",l=n.p+"assets/img/DP.19464cfe.jpg",p=n.p+"assets/img/yibu.b8521951.jpg",r=n.p+"assets/img/yibu2.ab197e0f.jpg",i=n.p+"assets/img/ring.60bdb68c.png",m=n.p+"assets/img/zero.f9fa8388.png",c=n.p+"assets/img/scatter1.f73f7f8c.png",o=n.p+"assets/img/reducescatter.526897da.png",h=n.p+"assets/img/all_reduce.f3803dfb.jpg",g=n.p+"assets/img/ringallreduce.cd20b5c5.jpg",d={},u=(0,n(6262).A)(d,[["render",function(a,s){return(0,t.uX)(),(0,t.CE)("div",null,[s[0]||(s[0]=(0,t.Lk)("h1",{id:"并行方法dp、tp、pp、ep、sp",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#并行方法dp、tp、pp、ep、sp"},[(0,t.Lk)("span",null,"并行方法DP、TP、PP、EP、SP")])],-1)),s[1]||(s[1]=(0,t.Lk)("h2",{id:"简介",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#简介"},[(0,t.Lk)("span",null,"简介")])],-1)),s[2]||(s[2]=(0,t.Lk)("p",null,"给你8张卡、16张卡DP怎么做？TP怎么做？EP（专家并行）怎么做？甚至还要了解一下SP（序列并行）。",-1)),s[3]||(s[3]=(0,t.Lk)("p",null,"如 tensor_parallel_size、pipeline_parallel_size、enable_expert_parallel、data_parallel_size）来手动设置 TP、PP、EP、DP 等并行策略",-1)),(0,t.Q3)(" more "),s[4]||(s[4]=(0,t.Fv)('<h2 id="一、data-parallel" tabindex="-1"><a class="header-anchor" href="#一、data-parallel"><span>一、Data Parallel</span></a></h2><p>数据并行（Data Parallel）是数据平均分配到GPU上并行处理的策略。<strong>每个GPU上都拥有一份完整的模型副本</strong>，<strong>各自吃一份数据(mini-batch)，算一份梯度，最后对梯度进行累加</strong>来更新整体模型。</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>数据并行主要分为以下三种方法：</p><ul><li>DP（Data Parallelism）：最早的数据并行模式，一般采用参数服务器(Parameters Server)这一编程框架。实际中多用于<strong>单机多卡</strong></li><li>DDP（Distributed Data Parallelism）：分布式数据并行，采用Ring AllReduce的通讯方式，实际中多用于<strong>多机多卡场景</strong></li><li>ZeRO：零冗余优化器。由微软推出并应用于其DeepSpeed框架中。严格来讲ZeRO采用<strong>数据并行+张量并行</strong>的方式，旨在<strong>降低存储</strong>。</li></ul><h3 id="_1-数据并行-dp" tabindex="-1"><a class="header-anchor" href="#_1-数据并行-dp"><span>1.数据并行（DP）</span></a></h3><h4 id="_1-1-主要框架" tabindex="-1"><a class="header-anchor" href="#_1-1-主要框架"><span>1.1 主要框架</span></a></h4><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>默认的主卡（通常是 GPU 0）负责读取一个 batch 的数据，并将数据划分为多个 mini-batch 分别发送到其他 GPU；</li><li>从主卡（GPU 0）复制一份最新的模型到所有 GPU 上；</li><li>每张 GPU 独立执行前向传播（FWD），得到各自的输出；所有 GPU 的输出被发送回主卡（GPU 0）进行 loss 计算；</li><li>这个 loss 被广播到所有 GPU 进行反向传播（BWD）；</li><li>每张 GPU 分别计算自己的梯度，并将这些梯度返回给 GPU 0；GPU 0 聚合计算所有梯度用于更新模型参数，并广播到所有 GPU 上。这个操作为<strong>AllReduce</strong>。</li></ol><p>前文说过，实现DP的一种经典编程框架叫“参数服务器”，在这个框架里，<strong>计算GPU称为Worker，梯度聚合GPU称为Server</strong>。在实际应用中，为了尽量减少通讯量，一般可选择一个Worker同时作为Server。比如GPU0既做计算（Worker），也做梯度聚合（Server），如上图。需要再额外说明几点：</p><ul><li>1个Worker或者Server下可以不止1块GPU。</li><li>Server可以只做梯度聚合，也可以梯度聚合+全量参数更新一起做。</li></ul><h4 id="_1-2-优缺点" tabindex="-1"><a class="header-anchor" href="#_1-2-优缺点"><span>1.2 优缺点</span></a></h4><p>优点：</p><ul><li>实现简单，易于理解</li><li>适合单机多卡（小模型）</li></ul><p>两个主要问题：</p><ul><li>存储开销大。每块GPU上都存了一份完整的模型，造成冗余。<strong>（ZeRO对其进行了优化）</strong></li><li>通讯开销大。Server需要和每一个Worker进行梯度传输。当Server和Worker不在一台机器上时，Server的带宽将会成为整个系统的计算效率瓶颈。<strong>（DDP对其进行了优化）</strong></li></ul><h4 id="_1-3-梯度异步更新" tabindex="-1"><a class="header-anchor" href="#_1-3-梯度异步更新"><span>1.3 梯度异步更新</span></a></h4><p>了解上述的DP计算过程，我们不难发现一个问题：当Server在搬运数据，计算梯度的时候，Worker们在干嘛呢？</p><p>当然是在：摸鱼！！！</p><p>为了尽可能的压榨计算资源，老板们想出了一个办法：<strong>梯度异步更新</strong>。</p><p>梯度异步更新简单来讲就是：在第N轮计算中，Worker正常计算梯度，并向Server发送梯度请求。但是，该Worker并不会实际等到把聚合梯度拿回来，更新完参数W后再做计算。而是直接拿旧的W，吃新的数据，继续第N+1轮的计算。这样就保证在通讯的时间里，Worker也在马不停蹄做计算，提升计算通讯比。<br><img src="'+p+'" alt="" loading="lazy"></p><p>当然，异步也不能太过份。只计算梯度，不更新权重，那模型就无法收敛。图中刻画的是延迟为1的异步更新，也就是在开始第12轮对的计算时，必须保证W已经用第10、11轮的梯度做完2次更新了。</p><p>参数服务器的框架下，<strong>延迟的步数也可以由用户自己决定</strong>，下图分别刻划了几种延迟情况：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>(a) 无延迟</li><li>(b) 延迟但不指定延迟步数。也即在迭代2时，用的可能是老权重，也可能是新权重，听天由命。</li><li>(c) 延迟且指定延迟步数为1。例如做迭代3时，可以不拿回迭代2的梯度，但必须保证迭代0、1的梯度都已拿回且用于参数更新。</li></ul><p><strong>异步很香，但对一个Worker来说，只是等于W不变，batch的数量增加了而已，在SGD下，会减慢模型的整体收敛速度</strong>。异步的整体思想是，比起让Worker闲着，倒不如让它多吃点数据，虽然反馈延迟了，但只要它在干活在学习就行。</p><h3 id="_2-分布式数据并行-ddp" tabindex="-1"><a class="header-anchor" href="#_2-分布式数据并行-ddp"><span>2.分布式数据并行（DDP）</span></a></h3><p>受通讯负载不均的影响，DP一般用于单机多卡场景。因此，DDP作为一种更通用的解决方案出现了，<strong>既能多机，也能单机</strong>。DDP首先要解决的就是通讯问题：<strong>将Server上的通讯压力均衡转到各个Worker上</strong>。实现这一点后，也就成就了DDP的核心思想：<strong>去Server，留Worker</strong>。</p><h4 id="_2-1-主要框架" tabindex="-1"><a class="header-anchor" href="#_2-1-主要框架"><span>2.1 主要框架</span></a></h4><p>DDP与DP的实现过程类似，步骤1-4都一致，<strong>不同的是第5步，DP是Server做AllReduce，而DDP是每个Worker做AllReduce</strong>。实现的核心操作为<strong>Ring AllReduce</strong>，具体介绍见附录6.AllReduce。Ring-AllReduce通过环形拓扑结构，将数据分发到相邻的节点，从而实现高效的通信。</p><p>单卡总通讯量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mfrac><mi mathvariant="normal">Φ</mi><mi>N</mi></mfrac></mrow><annotation encoding="application/x-tex">2(N - 1)\\frac{\\Phi}{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Φ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>的增大，可以近似为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">2\\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">2Φ</span></span></span></span>。全卡总通讯量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>N</mi><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">2N\\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">Φ</span></span></span></span>。</p><p>而对前文的 DP（Data Parallelism）来说，它的 Server 承载的通讯量是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">N\\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">Φ</span></span></span></span>，Workers 为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">N\\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">Φ</span></span></span></span>，全卡总通讯量依然为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>N</mi><mi mathvariant="normal">Φ</mi></mrow><annotation encoding="application/x-tex">2N\\Phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord">Φ</span></span></span></span>。<strong>虽然通讯量相同，但搬运相同数据量的时间却不一定相同</strong>。DDP 把通讯量均衡负载到了每一时刻的每个 Worker 上（<strong>其通讯时间仅取决于逻辑环中最慢的两个 GPU 的连接，且不随GPU数量的增多而增多）</strong>，而 DP 仅让 Server 做勤劳的搬运工。当越来越多的 GPU 分布在距离较远的机器上时，DP 的通讯时间是会增加的（<strong>其通讯时间随GPU数量增多而增大</strong>）。</p><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>如果一个节点上的所有 GPU 在环中彼此相邻，则该算法的功能最佳；这最小化了网络争用的量，否则这可能会显著降低 GPU-GPU 连接的有效带宽。</p><h4 id="_2-2-缺点" tabindex="-1"><a class="header-anchor" href="#_2-2-缺点"><span>2.2 缺点</span></a></h4><p>DDP存在的问题：在N张卡进行训练，设模型参数量为M，采用全精度参数，则需要参数+梯度+优化器(Adam优化器需要存储一阶动量和二阶动量)=（4+4+8）*M空间。<strong>占用显存空间过大！</strong></p><h3 id="_3-零冗余优化器-zero" tabindex="-1"><a class="header-anchor" href="#_3-零冗余优化器-zero"><span>3.零冗余优化器（ZeRO）</span></a></h3><p>ZeRO主要解决DP中每个GPU占用显存过大的问题，其主要思想是：<strong>将优化器状态、梯度和模型参数进行分割，每个GPU只保存部分数据</strong>。</p><p>ZeRO有三个阶段：</p><ul><li>ZeRO Stage 1：仅对优化器状态进行分割，每个GPU中仍有完整的模型参数和梯度数据</li><li>ZeRO Stage 2：对优化器状态和梯度进行分割</li><li>ZeRO Stage 3：对优化器状态、梯度和模型参数全部进行分割</li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>具体的ZeRO实现过程详见文章<a href="https://summer536.github.io/Notes/zh/posts/DeepSpeed.html" target="_blank" rel="noopener noreferrer">DeepSpeed</a></p><h2 id="二、model-parallel" tabindex="-1"><a class="header-anchor" href="#二、model-parallel"><span>二、Model Parallel</span></a></h2><h2 id="三、pipeline-parallel" tabindex="-1"><a class="header-anchor" href="#三、pipeline-parallel"><span>三、Pipeline Parallel</span></a></h2><h2 id="四、tensor-parallel" tabindex="-1"><a class="header-anchor" href="#四、tensor-parallel"><span>四、Tensor Parallel</span></a></h2><h2 id="五、sequence-parallel" tabindex="-1"><a class="header-anchor" href="#五、sequence-parallel"><span>五、Sequence Parallel</span></a></h2><h2 id="六、expert-parallel" tabindex="-1"><a class="header-anchor" href="#六、expert-parallel"><span>六、Expert Parallel</span></a></h2><h2 id="附录-常见集合通信算子" tabindex="-1"><a class="header-anchor" href="#附录-常见集合通信算子"><span>附录：常见集合通信算子</span></a></h2><p>集合通信（Collective Communications）是一个进程组的所有进程都参与的全局通信操作，其最为基础的操作有 <strong>发送 send</strong>、<strong>接收receive</strong>、<strong>复制 copy</strong>、<strong>组内进程栅障同步 Barrier</strong> 以及<strong>节点间进程同步(signal +wait )</strong>，这几个最基本的操作经过组合构成了一组通信模板也叫通信原语，比如：1 对多的广播 broadcast、多对 1 的收集gather、<strong>多对多的收集 all-gather</strong>、<strong>1 对多的发散 scatter</strong>、<strong>多对 1 的规约 reduce</strong>、<strong>多对多的规约 all-reduce</strong>、<strong>组合的规约与发散 reduce-scatter</strong>、<strong>多对多的 all-to-all</strong> 等，集合通信的难点在于通信效率以及网络硬件连接拓扑结构的最佳适用。</p><h3 id="_1-scatter-1分片-n分发" tabindex="-1"><a class="header-anchor" href="#_1-scatter-1分片-n分发"><span>1.Scatter(1分片-&gt;N分发)</span></a></h3><p>Scatter 是数据的 1 对多的分发，它将一张 XPU/GPU 卡上的数据进行<strong>分片再分发</strong>到其他所有的 XPU/GPU 卡上，他的反向操作对应 Gather，其应用场景有：</p><ul><li>ReduceScatter 组合里的 Scatter 操作；</li><li>模型并行里初始化时将模型 Scatter 到不同的 XPU 上；</li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-gather-n分片-1合并" tabindex="-1"><a class="header-anchor" href="#_2-gather-n分片-1合并"><span>2.Gather(N分片-&gt;1合并)</span></a></h3><p>Gather 是数据的多对 1 的收集，它将多张 XPU 卡上的数据收集到 1 张 XPU 卡上，他的反向操作对应 Scatter</p><h3 id="_3-allgather-n分片-1合并-n广播" tabindex="-1"><a class="header-anchor" href="#_3-allgather-n分片-1合并-n广播"><span>3.AllGather(N分片-&gt;1合并-&gt;N广播)</span></a></h3><p>AllGather 属于多对多的通信原语，具有多个数据发送者，多个数据接收者，可以在集群内<strong>把多个节点的数据收集到一个主节点上（Gather），再把这个收集到的数据分发到其他节点上（broadcast）</strong>，即收集集群内所有的数据到所有的节点上。可以看做 Gather + Broadcast 的操作组合，它的反向操作对应 ReduceScatter，其最应用场景有：</p><ul><li>AllGather 可应用于模型并行；</li><li>模型并行里前向计算里的参数全同步，需要用 allgather 把模型并行里将切分到不同的 XPU 上的参数全同步到一张 XPU 上才能进行前向计算。</li></ul><h3 id="_4-reduce-n分片-1规约计算" tabindex="-1"><a class="header-anchor" href="#_4-reduce-n分片-1规约计算"><span>4.Reduce(N分片-&gt;1规约计算)</span></a></h3><p>Reduce 是数据的多对 1 的规约运算，它将所有 XPU 卡上的数据，规约（比如 SUM 求和）到 1 张XPU卡上，其应用场景有：</p><ul><li>AllReduce 里的 broadcast + reduce 组合里的 reduce 操作；</li><li>ReduceScatter 组合里的 reduce 操作；</li><li>分布式训练 parameter server 参数服务器结构里的 master节点 broadcast 数据到 worker 节点，再从worker 节点 reduce 数据回 master 节点里的 reduce 操作；</li></ul><h3 id="_5-reducescatter-n分片-1规约计算-n分发" tabindex="-1"><a class="header-anchor" href="#_5-reducescatter-n分片-1规约计算-n分发"><span>5.ReduceScatter(N分片-&gt;1规约计算-&gt;N分发)</span></a></h3><p>ReduceScatter 是数据的多对多的 reduce + scatter 运算，它将所有的 XPU 卡上的数据<strong>先规约（比如 SUM 求和）到 1 张 XPU 卡上，再进行 scatter</strong>。如下图所示，先 reduce 操作 XPU 0-3 的数据 reduce 为 A(A0+A1+A2+A3) + B(B0 + B1 +B2 + B3) + C(C0 + C1 + C2 + C3) + D(D0 + D1 + D2 + D3 ) 到一张 XPU 上，再进行分片 scatter 到集群内所有的 XPU 卡上。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其应用场景有：</p><ul><li>ReduceScatter即可应用于数据并行也可应用于模型并行；</li><li>数据并行 allReduce 里的 ReduceScatter+ Allgather 组合里的 ReduceScatter 操作；</li><li>模型并行里在前向 allgather 后的反向计算里的 ReduceScatter；</li></ul><h3 id="_6-allreduce-n分片-1规约计算-n广播" tabindex="-1"><a class="header-anchor" href="#_6-allreduce-n分片-1规约计算-n广播"><span>6.AllReduce(N分片-&gt;1规约计算-&gt;N广播)</span></a></h3><p>AllReduce 的最终目标，就是让每块 GPU 上的数据都变成下图箭头右边汇总的结果。</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Ring-AllReduce 是由百度提出的一种高效 <strong>All Reduce</strong> 算法，用于在分布式系统中进行数据同步。它通过环形拓扑结构，将数据分发到相邻的节点，从而实现高效的通信。<br> nvidia的NCCL通信库采用了这种算法。其通信流程如下图所示：</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来计算的通信量只包括发送的参数量。假设有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 个设备，模型参数总量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi></mrow><annotation encoding="application/x-tex">\\Psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ψ</span></span></span></span>，每个梯度块的大小为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\\Psi/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ψ/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>，每个设备只与其相邻的设备进行通信，首先讲解 Reduce-scatter 阶段：</p><ul><li><strong>步骤1</strong>：显卡 a 将 a0 发送给显卡 b，同时接受显卡 d 发送的 d3。</li><li><strong>步骤2</strong>：显卡 a 将 a3 + d3 发送给显卡 b，同时接受显卡 d 发送的 c2 + d2。</li><li><strong>步骤3</strong>：显卡 a 将 a2 + c2 + d2 发送给显卡 b，同时接受显卡 d 发送的 b1 + c1 + d1。</li></ul><p>Scatter-Reduce 阶段通信量：每次通信量是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\\Psi/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ψ/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>，一共进行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 次通信，总通信量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\\Psi*(N-1)/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ψ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>。</p><p>接下来介绍 AllGather 阶段：</p><ul><li><strong>步骤1</strong>：显卡 a 将 a1 + b1 + c1 + d1 发送给显卡 b，显卡 b 直接做替换，同时接受显卡 d 发送的 a0 + b0 + c0 + d0，直接做替换。</li><li><strong>步骤2</strong>：显卡 a 将 a0 + b0 + c0 + d0 发送给显卡 b，显卡 b 直接做替换，同时接受显卡 d 发送的 a3 + b3 + c3 + d3，直接做替换。</li><li><strong>步骤3</strong>：显卡 a 将 a3 + b3 + c3 + d3 发送给显卡 b，显卡 b 直接做替换，同时接受显卡 d 发送的 a2 + b2 + c2 + d2，直接做替换。</li></ul><p>AllGather 阶段通信量：同样的，每次通信量是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\\Psi/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ψ/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>，一共进行 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 次通信，总通信量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\\Psi*(N-1)/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ψ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>。</p><p>可以看到，<strong>单个设备通信量与 GPU 数量 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 无关</strong>，通信量为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Ψ</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>N</mi><mo>+</mo><mi mathvariant="normal">Ψ</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>N</mi><mo>=</mo><mn>2</mn><mi mathvariant="normal">Ψ</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\\Psi*(N-1)/N + \\Psi*(N-1)/N = 2\\Psi*(N-1)/N </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ψ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ψ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">2Ψ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p><strong>当GPU数量足够多时，单卡总通信量趋近于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi mathvariant="normal">Ψ</mi></mrow><annotation encoding="application/x-tex">2\\Psi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">2Ψ</span></span></span></span>，即对于每个单卡，其通信量与 GPU 数量无关。</strong></p><p>值得注意的是，使用张量并行加速时，分布式系统 Allreduce 的<strong>通信速度只受限于逻辑环中最慢的两个 GPU 的连接</strong>;（每次需要通信的数据大小仅为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ψ</mi><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">\\Psi/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ψ/</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>，随着 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 增大，通信量减少，一般小于 network bandwidth）；总结就是 Ring Allreduce 的通信速度恒定，和设备数量无关，完全由系统中GPU 之间最慢的连接决定。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><h2 id="待更新" tabindex="-1"><a class="header-anchor" href="#待更新"><span>待更新</span></a></h2><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://mp.weixin.qq.com/s/kYeNjMsesfKfoZtJPRkciA" target="_blank" rel="noopener noreferrer">大模型的分布式训练框架：deepspeed</a></p><p><a href="https://zhuanlan.zhihu.com/p/469942194" target="_blank" rel="noopener noreferrer">深度学习常见AllReduce算法图解</a></p>',86))])}]]),P=JSON.parse('{"path":"/zh/posts/parallel.html","title":"并行方法DP、TP、PP、EP、SP","lang":"zh-CN","frontmatter":{"title":"并行方法DP、TP、PP、EP、SP","date":"2025-07-15T00:00:00.000Z","readingTime":300,"category":["笔记"],"tag":["GPU优化","算法优化"],"isOriginal":true,"description":"简介 给你8张卡、16张卡DP怎么做？TP怎么做？EP（专家并行）怎么做？甚至还要了解一下SP（序列并行）。 如 tensor_parallel_size、pipeline_parallel_size、enable_expert_parallel、data_parallel_size）来手动设置 TP、PP、EP、DP 等并行策略","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并行方法DP、TP、PP、EP、SP\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-07-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-15T11:11:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"GYQ\\",\\"url\\":\\"https://github.com/Summer536\\"}]}"],["meta",{"property":"og:url","content":"https://your-domain.com/Notes/zh/posts/parallel.html"}],["meta",{"property":"og:site_name","content":"GYQ的博客"}],["meta",{"property":"og:title","content":"并行方法DP、TP、PP、EP、SP"}],["meta",{"property":"og:description","content":"简介 给你8张卡、16张卡DP怎么做？TP怎么做？EP（专家并行）怎么做？甚至还要了解一下SP（序列并行）。 如 tensor_parallel_size、pipeline_parallel_size、enable_expert_parallel、data_parallel_size）来手动设置 TP、PP、EP、DP 等并行策略"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-15T11:11:27.000Z"}],["meta",{"property":"article:tag","content":"算法优化"}],["meta",{"property":"article:tag","content":"GPU优化"}],["meta",{"property":"article:published_time","content":"2025-07-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-15T11:11:27.000Z"}]]},"git":{"createdTime":1750855816000,"updatedTime":1752577887000,"contributors":[{"name":"yqgao","username":"yqgao","email":"gaoyuqing536@gmail.com","commits":6,"url":"https://github.com/yqgao"}]},"readingTime":{"minutes":11.45,"words":3436},"filePathRelative":"zh/posts/parallel.md","excerpt":"\\n<h2>简介</h2>\\n<p>给你8张卡、16张卡DP怎么做？TP怎么做？EP（专家并行）怎么做？甚至还要了解一下SP（序列并行）。</p>\\n<p>如 tensor_parallel_size、pipeline_parallel_size、enable_expert_parallel、data_parallel_size）来手动设置 TP、PP、EP、DP 等并行策略</p>\\n","autoDesc":true}')},6262:(a,s)=>{s.A=(a,s)=>{const n=a.__vccOpts||a;for(const[a,t]of s)n[a]=t;return n}}}]);